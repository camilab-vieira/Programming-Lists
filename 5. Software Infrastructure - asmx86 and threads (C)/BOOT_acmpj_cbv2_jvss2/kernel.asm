org 0x8600
jmp 0x0000:start

;================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;DATA


data:

    size db 9
    numBomb db 10
    Xo times 50 db 0
    input times 50 db 0

    square db 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 8, 8, 7, 8, 7, 8, 8, 7, 8, 7, 8
    selectSquare db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 7, 8, 7, 8, 8, 7, 8, 7, 8, 8, 7, 8, 14, 14
    openSquare db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 
    selectOpenSquare db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14
    bomb db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 0, 0, 0, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 8, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 8, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 0, 0, 0, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    openBomb db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 4, 4, 4, 4, 0, 6, 0, 0, 0, 8, 4, 4, 4, 4, 7, 7, 4, 4, 4, 8, 0, 0, 8, 8, 0, 0, 0, 4, 4, 4, 7, 7, 4, 4, 6, 0, 0, 8, 8, 0, 0, 0, 6, 4, 4, 4, 7, 7, 4, 4, 4, 0, 8, 8, 0, 0, 0, 0, 0, 4, 4, 4, 7, 7, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 7, 7, 4, 4, 4, 6, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 7, 7, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 7, 7, 4, 4, 4, 4, 6, 0, 0, 0, 6, 0, 4, 4, 4, 4, 7, 7, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    flag db 7, 7, 8, 8, 7, 8, 8, 7, 7, 8, 7, 7, 8, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 0, 0, 8, 0, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 0, 6, 12, 12, 0, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 0, 8, 6, 12, 6, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 8, 0, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 8, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 8, 8, 8, 7, 7, 7, 7, 8, 7, 8, 7, 8
    selectFlag db 14, 14, 8, 8, 7, 8, 8, 7, 7, 8, 7, 7, 8, 8, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 0, 0, 8, 0, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 0, 6, 12, 12, 0, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 0, 8, 6, 12, 6, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 8, 0, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 8, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 8, 7, 8, 8, 8, 7, 7, 7, 7, 8, 7, 8, 14, 14
    numOne db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 3, 3, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 3, 3, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 3, 3, 3, 3, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 3, 3, 3, 3, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    selectNumOne db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 14, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 3, 3, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 3, 3, 3, 3, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 3, 3, 3, 3, 8, 7, 7, 7, 7, 7, 14, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14
    numTwo db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 10, 10, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 10, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 10, 10, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    selectNumTwo db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 10, 10, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 10, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 10, 10, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14
    numThree db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    selectNumThree db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14
    numFour db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 7, 7, 8, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 8, 8, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    selectNumFour db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 7, 7, 8, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 8, 8, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14
    numFive db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 6, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    selectNumFive db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 6, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14 
    numSix db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 14, 14, 14, 14, 14, 14, 12, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 8, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 7, 12, 6, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 7, 7, 12, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 6, 14, 14, 14, 14, 14, 14, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    ;selectNumSix db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 14, 14, 14, 14, 14, 14, 12, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 8, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 7, 12, 6, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 6, 7, 7, 12, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14, 14, 14, 14, 14, 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 6, 14, 14, 14, 14, 14, 14, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14 
    numSeven db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 6, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 12, 6, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    ;selectNumSeven db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 6, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 12, 6, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14 
    numEight db 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
    ;selectNumEight db 14, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 7, 7, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 7, 7, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14, 14 

    matrix times 90 db 0
    closeMatrix times 90 db 99
    GameOver db 'GAME OVER', 0
    YouWin db 'YOU WIN', 0
    instructions db 'Press R to restart and ESC to menu', 0


;END DATA



;ADDITIONAL FUNCTIONS
;================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================

putchar:                   ;Printar caracter      
    push ax                ;Armazenar estado anterior dos registradores
    push bx              
	mov ah, 0x0e           ;Teletype output (printar)
    mov bh, 0              ;Numero da pagina
    mov bl, 0xf            ;Cor (branco)
	int 10h                ;Interrupcao de video
    pop bx                 ;Recuperar estado anterior dos registradores
    pop ax
	ret                    ;Retornar
endl:                      ;Quebra de linha
    push ax                ;Armazenar estado anterior dos registradores
	mov al, 0x0a           ;Chama uma nova linha (contudo o cursor nao vai para o inicio da proxima linha)
	call putchar
	mov al, 0x0d           ;Chama o carriage return (leva o cursor para o inicio da linha)
	call putchar
    pop ax                 ;Recuperar estado anterior dos registradores
	ret                    ;Retornar
getchar:                   ;Ler caracter do teclado
    mov ah, 0x00           ;Chamada para ler tecla pressionada
	int 16h                ;Interrupcao de teclado
    ret                    ;Retornar
printString:               ;Printando uma String 
    push ax                ;Armazenar estado anterior dos registradores
    xor ax, ax             ;Limpando registradores
    .loop:
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        cmp al, 0          ;Verifica o fim da string
        je .done           ;Se sim, encerra 
        call putchar
        jmp .loop          ;Printa o proximo caracter
    .done:
        call endl
        pop ax             ;Recuperar estado anterior dos registradores
        ret                ;Retornar
printPixel:                ;Printar um pixel
    push cx                ;Armazenar estado anterior dos registradores
    push dx
    add cx, 87             ;Centralizar o desenho
    add dx, 33
    mov ah, 0ch            ;Chamada para escrever um pixel na coordenada [dx, cx]
    mov bh, 0              ;Numero da pagina
    int 10h                ;Interrupcao de video
    pop dx                 ;Recuperar estado anterior dos registradores
    pop cx
    ret                    ;Retornar
            

;END ADDITIONAL FUNCTIONS


;================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;DEFINE MATRIX


matrixSize:                ;Definir matriz vazia
    push ax                ;Armazenar estado anterior dos registradores
    push bx
    push cx              
    xor ax, ax             ;Limpando registradores
    xor cx, cx
    mov bx, ax

    mov di, matrix         ;Ponteiro DI aponta para onde a str sera armazenada 
    mov si, size           ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mul ax                 ;Eleva ao quadrado (obter a quantidade total de itens)
    mov bx, ax             ;Armazenar a quantidade total de itens em BX
    mov al, 48             ;Armazenar o item que sera inserido em AL
    
    .loop:
        cmp cx, bx         ;Compara a quantidade de itens ja inseridos e o total
        je .end            ;Se todos ja foram inseridos, encerra
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        inc cx             ;Armazena a quantidade de caracteres inseridos na string
        jmp .loop
    .end:
        pop cx             ;Recuperar estado anterior dos registradores
        pop bx
        pop ax
        ret                ;Retornar

closeMatrixSize:           ;Definir matriz fechada vazia
    push ax                ;Armazenar estado anterior dos registradores
    push bx
    push cx              
    xor ax, ax             ;Limpando registradores
    xor cx, cx
    mov bx, ax

    mov di, closeMatrix    ;Ponteiro DI aponta para onde a str sera armazenada 
    mov al, 99
    stosb
    mov si, size           ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mul ax                 ;Eleva ao quadrado (obter a quantidade total de itens)
    mov bx, ax             ;Armazenar a quantidade total de itens em BX
    mov al, 67             ;Armazenar o item que sera inserido em AL
    
    .loop:
        cmp cx, bx         ;Compara a quantidade de itens ja inseridos e o total
        je .end            ;Se todos ja foram inseridos, encerra
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        inc cx             ;Armazena a quantidade de caracteres inseridos na string
        jmp .loop
    .end:
        pop cx             ;Recuperar estado anterior dos registradores
        pop bx
        pop ax
        ret                ;Retornar


putBomb:                   ;Definir posicao das bombas
    push ax                ;Armazenar estado anterior dos registradores
    push bx              
    push cx              
    push dx              
    xor ax, ax             ;Limpando registradores
    xor cx, cx
	mov bx, ax
    mov dx, ax

    mov si, numBomb        ;Ponteiro SI aponta para onde a str (num de bombas) esta armazenada 
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov bx, ax             ;Armazenar a quantidade total de itens em BX
    
    .loop:
        cmp cx, bx         ;Compara o num de bombas postas e o total de bombas
        je .end            ;Encerra
        call randomNumber
        mov si, Xo         ;Ponteiro SI aponta para onde o num (num aleatorio) esta armazenado
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        mov di, matrix     ;Ponteiro DI aponta para o inicio de matrix 
        add di, ax         ;Adiciona o conteudo de AX em DI (posicao da bomba)
        mov si, di         ;Ponteiro SI aponta para DI
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        cmp ax, 'B'        ;Verifica se ja existe uma bomba na posicao
        je .loop           ;Repete
        mov al, 'B'        ;Substitui o item por uma bomba
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        inc cx             ;Incrementa o num de bombas postas
        jmp .loop

    .end:
        pop dx             ;Recuperar estado anterior dos registradores
        pop cx
        pop bx
        pop ax
        ret                ;Retornar
   
    randomNumber:          ;Gera um num aleatorio  Xn+1 = (aXn + c) mod M
        push ax            ;Armazenar estado anterior dos registradores
        push bx              
        push cx              
        push dx              
        xor ax, ax         ;Limpando registradores
        xor cx, cx
        mov bx, ax
        mov dx, ax
        
        mov si, size       ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        mul ax             ;Eleva ao quadrado (total de itens)
        mov cx, ax         ;Armazenar a quantidade total de itens em CX
        
        mov si, Xo         ;Ponteiro SI aponta para onde a str (num aleatorio anterior) esta armazenada 
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        mov bx, 7          ;Armazena 7 em BX
        mul bx             ;Multiplica AX por BX
        mov bx, 53         ;Armazena 53 em BX
        add ax, bx         ;Adiciona BX em AX
        div cx             ;Divide AX por CX
        mov ax, dx         ;Armazena Dx (resto da divisao) em AX
        mov di, Xo         ;Ponteiro DI aponta para onde o num sera armazenado
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado

        pop dx             ;Recuperar estado anterior dos registradores
        pop cx
        pop bx
        pop ax
        

        ret                ;Retornar

putNumbers:
    push ax                ;Armazenar estado anterior dos registradores
    push bx              
    push cx              
    push dx              
    xor ax, ax             ;Limpando registradores
    xor cx, cx
    mov bx, ax
    mov dx, ax

    mov si, size           ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov bx, ax             ;Armazenar a quantidade de itens na lateral em BX
    mov si, matrix         ;Ponteiro SI apontando para onde a str esta armazenada
    
    .loop:
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        cmp al, 'B'        ;Verifica se e uma bomba
        jne .continue
        call nearBomb      
    .continue:
        inc cx             ;CX = x, deslocar um para o lado
        cmp cx, bx         ;Limite lateral 
        jne .loop          ;Ir para proxima linha

    .nextLine:
        mov cx, 0          ;Voltar para o inicio da linha (CX = x)
        inc dx             ;Ir para a linha de baixo (DX = y)
        cmp dx, bx         ;Limite vertical (verifica quando os 256 pixels foram postos)
        jne .loop          ;Encerra 
        
    .end: 
        pop dx             ;Recuperar estado anterior dos registradores
        pop cx
        pop bx
        pop ax
        ret                ;Retornar

    nearBomb:
        push ax                ;Armazenar estado anterior dos registradores
        push bx              
        push cx              
        push dx              
        push si            ;Coloca SI na pilha

        .left:             ;Colocar num a esquerda
            cmp cx, 0      ;Verifica se a bomba esta na borda esquerda
            je .right
            pop si         ;Pega SI
            push si
            sub si, 2      ;Volta duas casas (uma da bomba e uma que foi inc pelo lodsb)
            mov di, si     ;Ponteiro DI aponta para SI
            lodsb          ;Carrega em AL o conteudo apontado por SI e inc SI
            cmp al, 'B'    ;Verifica se é outra bomba
            je .right
            inc al         ;Inc o valor do quadrado
            stosb          ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        .right:
            mov ax, bx     ;Pega o tamanho do lado (esta armazenado em BX)
            dec ax         ;Dec ja que a contagem comeca no zero
            cmp cx, ax     ;Verifica se a bomba esta na borda direita
            je .top
            pop si         ;Pega SI
            push si
            mov di, si     ;Ponteiro DI aponta para SI
            lodsb          ;Carrega em AL o conteudo apontado por SI e inc SI
            cmp al, 'B'    ;Verifica se é outra bomba
            je .top
            inc al         ;Inc o valor do quadrado
            stosb          ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        .top:
            cmp dx, 0      ;Verifica se a bomba esta na borda superior
            je .down
            pop si         ;Pega SI
            push si
            inc si         ;Retira o que lodsb incrementou
            sub si, bx     ;Retira o equivalente a uma linha
            sub si, 2
            mov di, si     ;Ponteiro DI aponta para SI
            lodsb          ;Carrega em AL o conteudo apontado por SI e inc SI
            cmp al, 'B'    ;Verifica se é outra bomba
            je .down
            inc al         ;Inc o valor do quadrado
            stosb          ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        .down:
            mov ax, bx     ;Pega o tamanho do lado (esta armazenado em BX)
            dec ax         ;Dec ja que a contagem comeca no zero
            cmp dx, ax      ;Verifica se a bomba esta na borda inferior
            je .diagonalTL
            pop si         ;Pega SI
            push si
            add si, ax     ;adiciona o equivalente a uma linha
            mov di, si     ;Ponteiro DI aponta para SI
            lodsb          ;Carrega em AL o conteudo apontado por SI e inc SI
            cmp al, 'B'    ;Verifica se é outra bomba
            je .diagonalTL
            inc al         ;Inc o valor do quadrado
            stosb          ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        .diagonalTL:
            cmp cx, 0      ;Verifica se a bomba esta na borda esquerda
            je .diagonalTR
            cmp dx, 0      ;Verifica se a bomba esta na borda superior
            je .diagonalTR
            pop si         ;Pega SI
            push si
            sub si, bx     ;Retira o equivalente a uma linha     
            sub si, 2      ;Retira o que o lodsb inc e volta mais um (diagonal)
            mov di, si     ;Ponteiro DI aponta para SI
            lodsb          ;Carrega em AL o conteudo apontado por SI e inc SI
            cmp al, 'B'    ;Verifica se é outra bomba
            je .diagonalTR
            inc al         ;Inc o valor do quadrado
            stosb          ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        .diagonalTR:
            mov ax, bx     ;Pega o tamanho do lado (esta armazenado em BX)
            dec ax         ;Dec ja que a contagem comeca no zero
            cmp cx, ax     ;Verifica se a bomba esta na borda direita
            je .diagonalDL
            cmp dx, 0      ;Verifica se a bomba esta na borda superior
            je .diagonalDL
            pop si         ;Pega SI
            push si
            sub si, bx     ;Retira o equivalente a uma linha (sem retirar o inc pelo lodsb, fica na diagonal)
            mov di, si     ;Ponteiro DI aponta para SI
            lodsb          ;Carrega em AL o conteudo apontado por SI e inc SI
            cmp al, 'B'    ;Verifica se é outra bomba
            je .diagonalDL
            inc al         ;Inc o valor do quadrado
            stosb          ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        .diagonalDL:
            mov ax, bx     ;Pega o tamanho do lado (esta armazenado em BX)
            dec ax         ;Dec ja que a contagem comeca no zero
            cmp cx, 0      ;Verifica se a bomba esta na borda esquerda
            je .diagonalDR
            cmp dx, ax     ;Verifica se a bomba esta na borda inferior
            je .diagonalDR
            pop si         ;Pega SI
            push si
            dec ax         ;Retira o que o lodsb inc e volta mais um (diagonal)
            add si, ax     ;Adiciona o equivalente a uma linha 
            mov di, si     ;Ponteiro DI aponta para SI
            lodsb          ;Carrega em AL o conteudo apontado por SI e inc SI
            cmp al, 'B'    ;Verifica se é outra bomba
            je .diagonalDR
            inc al         ;Inc o valor do quadrado
            stosb          ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        .diagonalDR:
            mov ax, bx     ;Pega o tamanho do lado (esta armazenado em BX)
            dec ax         ;Dec ja que a contagem comeca no zero
            cmp cx, ax     ;Verifica se a bomba esta na borda direita
            je .end
            cmp dx, ax     ;Verifica se a bomba esta na borda inferior
            je .end
            pop si         ;Pega SI
            push si
            add si, bx     ;Adiciona o equivalente a uma linha (sem retirar o inc pelo lodsb, fica na diagonal)
            mov di, si     ;Ponteiro DI aponta para SI
            lodsb          ;Carrega em AL o conteudo apontado por SI e inc SI
            cmp al, 'B'    ;Verifica se é outra bomba
            je .end
            inc al         ;Inc o valor do quadrado
            stosb          ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        .end:
            pop si         ;Recuperar estado anterior de SI
            pop dx         ;Recuperar estado anterior dos registradores
            pop cx
            pop bx
            pop ax
            ret            ;Retornar


;END DEFINE MATRIX



;PRINTAR MATRIX


printMatrix:               ;Printando matrix
    ; push ax                ;Armazenar estado anterior dos registradores
    ; push bx              
    ; push cx              
    ; push dx
    ; xor ax, ax             ;Limpando registradores
    ; xor cx, cx
	; mov bx, ax
    ; mov dx, ax
    
    ; mov di, si
    ; mov si, size           ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
    ; lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    ; mov bx, ax             ;Armazenar a quantidade total de itens em BX
    ; mov si, di

	; .loop:
    ;     lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
    ;     call putchar
    ;     mov al, 32         ;Adiciona um espaco entre os itens
    ;     call putchar
    ;     inc cx             ;CX = x, deslocar um para o lado
    ;     cmp cx, bx         ;Limite lateral 
    ;     je .nextLine      ;Ir para proxima linha
    ;     jmp .loop          ;Carregar proximo pixel
        
    ; .nextLine:
    ;     mov cx, 0          ;Voltar para o inicio da linha (CX = x)
    ;     inc dx             ;Ir para a linha de baixo (DX = y)
    ;     call endl
    ;     cmp dx, bx         ;Limite vertical 
    ;     je .end           ;Encerra 
    ;     jmp .loop          ;Carregar o proximo pixel

    ; .end: 
    ;     pop dx             ;Recuperar estado anterior dos registradores
    ;     pop cx
    ;     pop bx
    ;     pop ax
    ;     ret                ;Retornar


;END PRINTAR MATRIX



;PLAYING


playing:                   ;Jogando 
    mov ah, 0              ;Numero de chamada (modo video)
    mov al, 13h            ;Modo de video (modo VGA)
    int 10h                ;Interrupcao de video

    mov si, closeMatrix    ;Ponteiro SI apontando para o inicio da str
    call boardDrawing

    call win 

    mov si, size           ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov cx, ax             ;Armazenar a quantidade total de itens em CX

    call getchar
    jmp processInput

    jmp playing

processInput:              ;Processar a entrada
    cmp al, 'w'            ;Verifica se foi W (Cima)
    je inputW
    cmp al, 'a'            ;Verifica se foi A (Esquerda)            
    je inputA
    cmp al, 'd'            ;Verifica se foi D (Direita)
    je inputD
    cmp al, 's'            ;Verifica se foi S (Baixo)
    je inputS
    cmp al, 'f'            ;Verifica se foi F (flag)
    je inputF
    cmp al, 32             ;Verifica se foi espaço (abrir o quadrado)
    je inputSpace
    cmp al, 27             ;Verifica se foi ESC (ir para o menu)
    je goToMenu

    .end:
        jmp playing        ;Retornar

inputW:                    ;Processar o W
    push ax                ;Armazenar estado anterior dos registradores
    push cx              
    push dx
    xor ax, ax             ;Limpando registradores
    mov dx, ax
    
    cmp bx, cx             ;Verifica a borda superior
    jb .done
    mov di, closeMatrix    ;DI apontando para o inicio da str
    add di, bx             ;Acha a posicao de DI (adiciona BX)
    mov si, di             ;SI aponta para DI
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov dl, al
    
    cmp dl, 'f'            ;Verifica se o quadrado selecionado e uma flag
    mov al, 'F'            ;Armazena o quadrado da flag nao selecionado
    je .continue            
    
    cmp dl, 'c'            ;Verifica se o quadrado selecionado e normal
    mov al, 'C'            ;Armazena o quadrado normal nao selecionado
    je .continue           
    
    cmp dl, 80             ;Verifica se o quadrado selecionado e um zero
    mov al, 48             ;Armazena o quadrado do zero nao selecionado
    je .continue            
    
    cmp dl, 81             ;Verifica se o quadrado selecionado e um um
    mov al, 49             ;Armazena o quadrado do um nao selecionado
    je .continue            
    
    cmp dl, 82             ;Verifica se o quadrado selecionado e um dois
    mov al, 50             ;Armazena o quadrado do dois nao selecionado
    je .continue            
    
    cmp dl, 83             ;Verifica se o quadrado selecionado e um tres
    mov al, 51             ;Armazena o quadrado do tres nao selecionado
    je .continue            
    
    cmp dl, 84             ;Verifica se o quadrado selecionado e um quatro
    mov al, 52             ;Armazena o quadrado do quatro nao selecionado
    je .continue            
    
    cmp dl, 85             ;Verifica se o quadrado selecionado e um cinco
    mov al, 53             ;Armazena o quadrado do cinco nao selecionado
    je .continue            
    
    cmp dl, 86             ;Verifica se o quadrado selecionado e um seis
    mov al, 54             ;Armazena o quadrado do seis nao selecionado
    je .continue            
    
    cmp dl, 87             ;Verifica se o quadrado selecionado e um sete
    mov al, 55             ;Armazena o quadrado do sete nao selecionado
    je .continue            
    
    cmp dl, 88             ;Verifica se o quadrado selecionado e um oito
    mov al, 56             ;Armazena o quadrado do oito nao selecionado
    je .continue            

    .continue:
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        sub bx, 9          ;Retira de BX as posicoes que serao movidas
        sub di, 10         ;Move DI para a nova posicao
        mov si, di         ;SI aponta para DI
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        mov dl, al
        
        cmp dl, 'F'        ;Verifica se o quadrado que sera selecionado e uma flag
        mov al, 'f'        ;Armazena o quadrado da flag selecionado
        je .end            
        
        cmp dl, 'C'        ;Verifica se o quadrado que sera selecionado e normal
        mov al, 'c'        ;Armazena o quadrado normal selecionado
        je .end           
        
        cmp dl, 48         ;Verifica se o quadrado que sera selecionado e um zero
        mov al, 80         ;Armazena o quadrado do zero selecionado
        je .end            
        
        cmp dl, 49         ;Verifica se o quadrado que sera selecionado e um um
        mov al, 81         ;Armazena o quadrado do um selecionado
        je .end            
        
        cmp dl, 50         ;Verifica se o quadrado que sera selecionado e um dois
        mov al, 82         ;Armazena o quadrado do dois selecionado
        je .end            
        
        cmp dl, 51         ;Verifica se o quadrado que sera selecionado e um tres
        mov al, 83         ;Armazena o quadrado do tres selecionado
        je .end            
        
        cmp dl, 52         ;Verifica se o quadrado que sera selecionado e um quatro
        mov al, 84         ;Armazena o quadrado do quatro selecionado
        je .end            
        
        cmp dl, 53         ;Verifica se o quadrado que sera selecionado e um cinco
        mov al, 85         ;Armazena o quadrado do cinco selecionado
        je .end            
        
        cmp dl, 54         ;Verifica se o quadrado que sera selecionado e um seis
        mov al, 86         ;Armazena o quadrado do seis selecionado
        je .end            
        
        cmp dl, 55         ;Verifica se o quadrado que sera selecionado e um sete
        mov al, 87         ;Armazena o quadrado do sete selecionado
        je .end            
        
        cmp dl, 56         ;Verifica se o quadrado que sera selecionado e um oito
        mov al, 88         ;Armazena o quadrado do oito selecionado
        je .end            

    .end:
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
    .done:
        pop dx             ;Recuperar estado anterior dos registradores
        pop cx
        pop ax
        jmp playing        ;Retornar

inputA:                    ;Processar o A
    push ax                ;Armazenar estado anterior dos registradores
    push cx              
    push dx
    xor ax, ax             ;Limpando registradores
    mov dx, ax
    
    cmp bx, 0              ;Verifica o limite a esquerda
    je .done
    mov di, closeMatrix    ;DI apontando para o inicio da str
    add di, bx             ;Acha a posicao de DI (adiciona BX)
    mov si, di             ;SI aponta para DI
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov dl, al
    
    cmp dl, 'f'            ;Verifica se o quadrado selecionado e uma flag
    mov al, 'F'            ;Armazena o quadrado da flag nao selecionado
    je .continue            
    
    cmp dl, 'c'            ;Verifica se o quadrado selecionado e normal
    mov al, 'C'            ;Armazena o quadrado normal nao selecionado
    je .continue           
    
    cmp dl, 80             ;Verifica se o quadrado selecionado e um zero
    mov al, 48             ;Armazena o quadrado do zero nao selecionado
    je .continue            
    
    cmp dl, 81             ;Verifica se o quadrado selecionado e um um
    mov al, 49             ;Armazena o quadrado do um nao selecionado
    je .continue            
    
    cmp dl, 82             ;Verifica se o quadrado selecionado e um dois
    mov al, 50             ;Armazena o quadrado do dois nao selecionado
    je .continue            
    
    cmp dl, 83             ;Verifica se o quadrado selecionado e um tres
    mov al, 51             ;Armazena o quadrado do tres nao selecionado
    je .continue            
    
    cmp dl, 84             ;Verifica se o quadrado selecionado e um quatro
    mov al, 52             ;Armazena o quadrado do quatro nao selecionado
    je .continue            
    
    cmp dl, 85             ;Verifica se o quadrado selecionado e um cinco
    mov al, 53             ;Armazena o quadrado do cinco nao selecionado
    je .continue            
    
    cmp dl, 86             ;Verifica se o quadrado selecionado e um seis
    mov al, 54             ;Armazena o quadrado do seis nao selecionado
    je .continue            
    
    cmp dl, 87             ;Verifica se o quadrado selecionado e um sete
    mov al, 55             ;Armazena o quadrado do sete nao selecionado
    je .continue            
    
    cmp dl, 88             ;Verifica se o quadrado selecionado e um oito
    mov al, 56             ;Armazena o quadrado do oito nao selecionado
    je .continue            

    .continue:
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        dec bx             ;Retira de BX as posicoes que serao movidas
        sub di, 2          ;Move DI para a nova posicao
        mov si, di         ;SI aponta para DI
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        mov dl, al
        
        cmp dl, 'F'        ;Verifica se o quadrado que sera selecionado e uma flag
        mov al, 'f'        ;Armazena o quadrado da flag selecionado
        je .end            
        
        cmp dl, 'C'        ;Verifica se o quadrado que sera selecionado e normal
        mov al, 'c'        ;Armazena o quadrado normal selecionado
        je .end           
        
        cmp dl, 48         ;Verifica se o quadrado que sera selecionado e um zero
        mov al, 80         ;Armazena o quadrado do zero selecionado
        je .end            
        
        cmp dl, 49         ;Verifica se o quadrado que sera selecionado e um um
        mov al, 81         ;Armazena o quadrado do um selecionado
        je .end            
        
        cmp dl, 50         ;Verifica se o quadrado que sera selecionado e um dois
        mov al, 82         ;Armazena o quadrado do dois selecionado
        je .end            
        
        cmp dl, 51         ;Verifica se o quadrado que sera selecionado e um tres
        mov al, 83         ;Armazena o quadrado do tres selecionado
        je .end            
        
        cmp dl, 52         ;Verifica se o quadrado que sera selecionado e um quatro
        mov al, 84         ;Armazena o quadrado do quatro selecionado
        je .end            
        
        cmp dl, 53         ;Verifica se o quadrado que sera selecionado e um cinco
        mov al, 85         ;Armazena o quadrado do cinco selecionado
        je .end            
        
        cmp dl, 54         ;Verifica se o quadrado que sera selecionado e um seis
        mov al, 86         ;Armazena o quadrado do seis selecionado
        je .end            
        
        cmp dl, 55         ;Verifica se o quadrado que sera selecionado e um sete
        mov al, 87         ;Armazena o quadrado do sete selecionado
        je .end            
        
        cmp dl, 56         ;Verifica se o quadrado que sera selecionado e um oito
        mov al, 88         ;Armazena o quadrado do oito selecionado
        je .end            

    .end:
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
    .done:
        pop dx             ;Recuperar estado anterior dos registradores
        pop cx
        pop ax
        jmp playing        ;Retornar


inputD:                    ;Processar o D
    push ax                ;Armazenar estado anterior dos registradores
    push cx              
    push dx
    xor ax, ax             ;Limpando registradores
    mov dx, ax
    
    mov ax, cx             
    mul ax                 ;Obter o num de itens
    dec ax

    cmp bx, ax             ;Verifica o limite a direita
    je .done
    mov di, closeMatrix    ;DI apontando para o inicio da str
    add di, bx             ;Acha a posicao de DI (adiciona BX)
    mov si, di             ;SI aponta para DI
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov dl, al
    
    cmp dl, 'f'            ;Verifica se o quadrado selecionado e uma flag
    mov al, 'F'            ;Armazena o quadrado da flag nao selecionado
    je .continue            
    
    cmp dl, 'c'            ;Verifica se o quadrado selecionado e normal
    mov al, 'C'            ;Armazena o quadrado normal nao selecionado
    je .continue           
    
    cmp dl, 80             ;Verifica se o quadrado selecionado e um zero
    mov al, 48             ;Armazena o quadrado do zero nao selecionado
    je .continue            
    
    cmp dl, 81             ;Verifica se o quadrado selecionado e um um
    mov al, 49             ;Armazena o quadrado do um nao selecionado
    je .continue            
    
    cmp dl, 82             ;Verifica se o quadrado selecionado e um dois
    mov al, 50             ;Armazena o quadrado do dois nao selecionado
    je .continue            
    
    cmp dl, 83             ;Verifica se o quadrado selecionado e um tres
    mov al, 51             ;Armazena o quadrado do tres nao selecionado
    je .continue            
    
    cmp dl, 84             ;Verifica se o quadrado selecionado e um quatro
    mov al, 52             ;Armazena o quadrado do quatro nao selecionado
    je .continue            
    
    cmp dl, 85             ;Verifica se o quadrado selecionado e um cinco
    mov al, 53             ;Armazena o quadrado do cinco nao selecionado
    je .continue            
    
    cmp dl, 86             ;Verifica se o quadrado selecionado e um seis
    mov al, 54             ;Armazena o quadrado do seis nao selecionado
    je .continue            
    
    cmp dl, 87             ;Verifica se o quadrado selecionado e um sete
    mov al, 55             ;Armazena o quadrado do sete nao selecionado
    je .continue            
    
    cmp dl, 88             ;Verifica se o quadrado selecionado e um oito
    mov al, 56             ;Armazena o quadrado do oito nao selecionado
    je .continue            

    .continue:
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        inc bx             ;Adiciona em BX as posicoes que serao movidas
        mov si, di         ;SI aponta para DI
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        mov dl, al
        
        cmp dl, 'F'        ;Verifica se o quadrado que sera selecionado e uma flag
        mov al, 'f'        ;Armazena o quadrado da flag selecionado
        je .end            
        
        cmp dl, 'C'        ;Verifica se o quadrado que sera selecionado e normal
        mov al, 'c'        ;Armazena o quadrado normal selecionado
        je .end           
        
        cmp dl, 48         ;Verifica se o quadrado que sera selecionado e um zero
        mov al, 80         ;Armazena o quadrado do zero selecionado
        je .end            
        
        cmp dl, 49         ;Verifica se o quadrado que sera selecionado e um um
        mov al, 81         ;Armazena o quadrado do um selecionado
        je .end            
        
        cmp dl, 50         ;Verifica se o quadrado que sera selecionado e um dois
        mov al, 82         ;Armazena o quadrado do dois selecionado
        je .end            
        
        cmp dl, 51         ;Verifica se o quadrado que sera selecionado e um tres
        mov al, 83         ;Armazena o quadrado do tres selecionado
        je .end            
        
        cmp dl, 52         ;Verifica se o quadrado que sera selecionado e um quatro
        mov al, 84         ;Armazena o quadrado do quatro selecionado
        je .end            
        
        cmp dl, 53         ;Verifica se o quadrado que sera selecionado e um cinco
        mov al, 85         ;Armazena o quadrado do cinco selecionado
        je .end            
        
        cmp dl, 54         ;Verifica se o quadrado que sera selecionado e um seis
        mov al, 86         ;Armazena o quadrado do seis selecionado
        je .end            
        
        cmp dl, 55         ;Verifica se o quadrado que sera selecionado e um sete
        mov al, 87         ;Armazena o quadrado do sete selecionado
        je .end            
        
        cmp dl, 56         ;Verifica se o quadrado que sera selecionado e um oito
        mov al, 88         ;Armazena o quadrado do oito selecionado
        je .end            

    .end:
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
    .done:
        pop dx             ;Recuperar estado anterior dos registradores
        pop cx
        pop ax
        jmp playing        ;Retornar

inputS:                    ;Processar o S
    push ax                ;Armazenar estado anterior dos registradores
    push cx              
    push dx
    xor ax, ax             ;Limpando registradores
    mov dx, ax
    
    mov ax, cx             
    mul ax                 ;Obter o num de itens
    sub ax, cx             ;Obter a posicao de comeco da ultima linha

    cmp bx, ax             ;Verifica o limite da borda inferior
    jae .done
    mov di, closeMatrix    ;DI apontando para o inicio da str
    add di, bx             ;Acha a posicao de DI (adiciona BX)
    mov si, di             ;SI aponta para DI
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov dl, al
    
    cmp dl, 'f'            ;Verifica se o quadrado selecionado e uma flag
    mov al, 'F'            ;Armazena o quadrado da flag nao selecionado
    je .continue            
    
    cmp dl, 'c'            ;Verifica se o quadrado selecionado e normal
    mov al, 'C'            ;Armazena o quadrado normal nao selecionado
    je .continue           
    
    cmp dl, 80             ;Verifica se o quadrado selecionado e um zero
    mov al, 48             ;Armazena o quadrado do zero nao selecionado
    je .continue            
    
    cmp dl, 81             ;Verifica se o quadrado selecionado e um um
    mov al, 49             ;Armazena o quadrado do um nao selecionado
    je .continue            
    
    cmp dl, 82             ;Verifica se o quadrado selecionado e um dois
    mov al, 50             ;Armazena o quadrado do dois nao selecionado
    je .continue            
    
    cmp dl, 83             ;Verifica se o quadrado selecionado e um tres
    mov al, 51             ;Armazena o quadrado do tres nao selecionado
    je .continue            
    
    cmp dl, 84             ;Verifica se o quadrado selecionado e um quatro
    mov al, 52             ;Armazena o quadrado do quatro nao selecionado
    je .continue            
    
    cmp dl, 85             ;Verifica se o quadrado selecionado e um cinco
    mov al, 53             ;Armazena o quadrado do cinco nao selecionado
    je .continue            
    
    cmp dl, 86             ;Verifica se o quadrado selecionado e um seis
    mov al, 54             ;Armazena o quadrado do seis nao selecionado
    je .continue            
    
    cmp dl, 87             ;Verifica se o quadrado selecionado e um sete
    mov al, 55             ;Armazena o quadrado do sete nao selecionado
    je .continue            
    
    cmp dl, 88             ;Verifica se o quadrado selecionado e um oito
    mov al, 56             ;Armazena o quadrado do oito nao selecionado
    je .continue            

    .continue:
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        add bx, 9          ;Adiciona em BX as posicoes que serao movidas
        add di, 8          ;Move DI para a nova posicao
        mov si, di         ;SI aponta para DI
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        mov dl, al
        
        cmp dl, 'F'        ;Verifica se o quadrado que sera selecionado e uma flag
        mov al, 'f'        ;Armazena o quadrado da flag selecionado
        je .end            
        
        cmp dl, 'C'        ;Verifica se o quadrado que sera selecionado e normal
        mov al, 'c'        ;Armazena o quadrado normal selecionado
        je .end           
        
        cmp dl, 48         ;Verifica se o quadrado que sera selecionado e um zero
        mov al, 80         ;Armazena o quadrado do zero selecionado
        je .end            
        
        cmp dl, 49         ;Verifica se o quadrado que sera selecionado e um um
        mov al, 81         ;Armazena o quadrado do um selecionado
        je .end            
        
        cmp dl, 50         ;Verifica se o quadrado que sera selecionado e um dois
        mov al, 82         ;Armazena o quadrado do dois selecionado
        je .end            
        
        cmp dl, 51         ;Verifica se o quadrado que sera selecionado e um tres
        mov al, 83         ;Armazena o quadrado do tres selecionado
        je .end            
        
        cmp dl, 52         ;Verifica se o quadrado que sera selecionado e um quatro
        mov al, 84         ;Armazena o quadrado do quatro selecionado
        je .end            
        
        cmp dl, 53         ;Verifica se o quadrado que sera selecionado e um cinco
        mov al, 85         ;Armazena o quadrado do cinco selecionado
        je .end            
        
        cmp dl, 54         ;Verifica se o quadrado que sera selecionado e um seis
        mov al, 86         ;Armazena o quadrado do seis selecionado
        je .end            
        
        cmp dl, 55         ;Verifica se o quadrado que sera selecionado e um sete
        mov al, 87         ;Armazena o quadrado do sete selecionado
        je .end            
        
        cmp dl, 56         ;Verifica se o quadrado que sera selecionado e um oito
        mov al, 88         ;Armazena o quadrado do oito selecionado
        je .end            

    .end:
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
    .done:
        pop dx             ;Recuperar estado anterior dos registradores
        pop cx
        pop ax
        jmp playing        ;Retornar

inputF:                    ;Processar o F
    push ax                ;Armazenar estado anterior dos registradores
    push cx              
    push dx
    xor ax, ax             ;Limpando registradores
    xor cx, cx
	mov dx, ax

    mov di, closeMatrix    ;DI apontando para o inicio da str
    add di, bx             ;Acha a posicao de DI (adiciona BX)
    mov si, di             ;SI aponta para DI
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    cmp al, 'f'            ;Verifica se ja esta marcado
    je .removeF
    cmp al, 'c'            ;Verifica se o quadrado esta fechado
    jne .end
    mov al,'f'             ;Armazena f em AL
    stosb                  ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
    dec di                 ;Retira o valor que foi incrementado por stosb
    jmp .end 

    .removeF:
        mov al, 'c'        ;Armazena c em AL
        stosb              ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        dec di             ;Retira o valor que foi incrementado por stosb
    .end:
        pop dx             ;Recuperar estado anterior dos registradores
        pop cx
        pop ax
        jmp playing        ;Retornar

inputSpace:                ;Processar espaço
    push ax                ;Armazenar estado anterior dos registradores
    push cx              
    push dx
    xor ax, ax             ;Limpando registradores
    xor cx, cx
	mov dx, ax
    
    mov si, matrix         ;SI apontando para o inicio da str
    add si, bx             ;Acha a posicao de SI (adiciona BX)
    mov di, closeMatrix    ;DI apontando para o inicio da str
    add di, bx             ;Acha a posicao de DI (adiciona BX)
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov dl, al

    cmp dl, 'B'            ;Verifica se e uma bomba
    je gameOver         

    cmp dl, 48            ;Verifica se o quadrado que sera selecionado e um zero
    mov al, 80            ;Armazena o quadrado do zero selecionado
    je .continue            
    
    cmp dl, 49            ;Verifica se o quadrado que sera selecionado e um um
    mov al, 81            ;Armazena o quadrado do um selecionado
    je .continue            
    
    cmp dl, 50            ;Verifica se o quadrado que sera selecionado e um dois
    mov al, 82            ;Armazena o quadrado do dois selecionado
    je .continue            
    
    cmp dl, 51            ;Verifica se o quadrado que sera selecionado e um tres
    mov al, 83            ;Armazena o quadrado do tres selecionado
    je .continue            
    
    cmp dl, 52            ;Verifica se o quadrado que sera selecionado e um quatro
    mov al, 84            ;Armazena o quadrado do quatro selecionado
    je .continue            
    
    cmp dl, 53            ;Verifica se o quadrado que sera selecionado e um cinco
    mov al, 85            ;Armazena o quadrado do cinco selecionado
    je .continue            
    
    cmp dl, 54            ;Verifica se o quadrado que sera selecionado e um seis
    mov al, 86            ;Armazena o quadrado do seis selecionado
    je .continue            
    
    cmp dl, 55            ;Verifica se o quadrado que sera selecionado e um sete
    mov al, 87            ;Armazena o quadrado do sete selecionado
    je .continue            
    
    cmp dl, 56            ;Verifica se o quadrado que sera selecionado e um oito
    mov al, 88            ;Armazena o quadrado do oito selecionado
    je .continue            


    .continue:
        stosb             ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
        
    .end:
        pop dx            ;Recuperar estado anterior dos registradores
        pop cx
        pop ax
        jmp playing       ;Retornar

;================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;END PLAYING



;PRINTAR WIN

win:                       ;Verifica se venceu
    push ax                ;Armazenar estado anterior dos registradores
    push bx              
    push cx              
    push dx
    push si
    xor ax, ax             ;Limpando registradores
    xor cx, cx
	mov bx, ax
	mov dx, ax

    mov si, size           ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mul ax                 ;Obter o total de itens
    mov dx, ax             ;Armazenar a quantidade total de itens em DX
    
    mov si, closeMatrix    ;Ponteiro SI aponta para onde a str esta armazenada 

    .loop:
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        cmp al, 'C'        ;Verifica se o quadrado esta fechado
        je .increment
        cmp al, 'c'        ;Verifica se o quadrado esta fechado
        je .increment
        cmp al, 'F'        ;Verifica se o quadrado esta fechado
        je .increment
        cmp al, 'f'        ;Verifica se o quadrado esta fechado
        je .increment
        jmp .continue
    .increment:
        inc cx             ;Incrementa o contador de quadrados fechados
    .continue:
        inc bx             ;Incrementa o contador de quadrados verificados
        cmp dx, bx         ;Compara o num de quadrados verificados e o total
        ja .loop

    mov si, numBomb        ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    cmp ax, cx             ;Verifica se o num de quadrados fechados e o mesmo do de bombas
    jne .end
    jmp youWin

    .end: 
        pop si             ;Recuperar estado anterior dos registradores
        pop dx
        pop cx
        pop bx
        pop ax
        ret                 ;Retornar

youWin:
    mov ah, 0              ;Numero de chamada (modo video)
    mov al, 13h            ;Modo de video (modo VGA)
    int 10h                ;Interrupcao de video
    
    mov si, matrix         ;Ponteiro SI aponta para onde a matriz esta armazenada
    call boardDrawing
    
    mov ah, 02h            ;Chamada para posicionar o cursor
    mov dh, 2              ;Define a linha
    mov dl, 16             ;Define a coluna
    int 10h                ;Interrupcao de video

    mov si, YouWin         ;Ponteiro SI aponta para onde a str esta armazenada
    call printString
    
    mov ah, 02h            ;Chamada para posicionar o cursor
    mov dh, 23             ;Define a linha
    mov dl, 3              ;Define a coluna
    int 10h                ;Interrupcao de video    
    
    mov si, instructions   ;Ponteiro SI aponta para onde a str esta armazenada
    call printString
        
    .continue:
        call getchar
        cmp al, 27         ;Verifica se foi espaço (abrir o quadrado)
        je goToMenu
        cmp al, 'r'        ;Verifica se foi espaço (abrir o quadrado)
        je start
     
    jmp .continue
    
;================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
;END PRINTAR WIN



;PRINTAR GAMEOVER
;================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================================
gameOver:                  ;Tela de GameOver
    dec si                 ;Retira o que foi inc por lodsb
    mov di, si             ;Ponteiro DI aponta para SI
    mov al, 'b'            ;Armazena b em AL
    stosb                  ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado
    
    mov ah, 0              ;Numero de chamada (modo video)
    mov al, 13h            ;Modo de video (modo VGA)
    int 10h                ;Interrupcao de video
    
    mov si, matrix         ;Ponteiro SI aponta para onde a matriz esta armazenada
    call boardDrawing
        
    mov ah, 02h            ;Chamada para posicionar o cursor
    mov dh, 2              ;Define a linha
    mov dl, 15             ;Define a coluna
    int 10h                ;Interrupcao de video
    
    mov si, GameOver       ;Ponteiro SI aponta para onde a str esta armazenada
    call printString
        
    mov ah, 02h            ;Chamada para posicionar o cursor
    mov dh, 23             ;Define a linha
    mov dl, 3              ;Define a coluna
    int 10h                ;Interrupcao de video
    
    mov si, instructions   ;Ponteiro SI aponta para onde a str esta armazenada
    call printString
        
    .continue:
        call getchar
        cmp al, 27         ;Verifica se foi espaço (abrir o quadrado)
        je goToMenu
        cmp al, 'r'        ;Verifica se foi espaço (abrir o quadrado)
        je start
     
    jmp .continue


;END PRINTAR GAMEOVER



;GO TO MENU 


goToMenu: ;Setando a posição do disco onde kernel.asm foi armazenado(ES:BX = [0x500:0x0])
	mov ax,0x7E0	;0x50<<1 + 0 = 0x500
	mov es,ax
	xor bx,bx		;Zerando o offset

    ;Setando a posição da Ram onde o jogo será lido
	mov ah, 0x02	;comando de ler setor do disco
	mov al,20		;quantidade de blocos ocupados por jogo
	mov dl,0		;drive floppy

    ;Usaremos as seguintes posições na memoria:
	mov ch,0		;trilha 0
	mov cl,3		;setor 2
	mov dh,0		;cabeca 0
	int 13h
	jc goToMenu	;Em caso de erro, tenta de novo

    jmp 0x7E00


;END GO TO MENU



;DRAWING GAME

drawing:                   ;Desenhar quadrado
    push ax                ;Armazenar estado anterior dos registradores
    push bx              
    push cx              
    push dx
    xor ax, ax             ;Limpando registradores
    mov bx, ax
    
    mov ax, 16
    mul cx                 ;Limite lateral do tamanho
    mov bx, ax
    mov cx, ax
    sub cx, 16             ;Posiciona CX no inicio do limite lateral
    
    mov ax, 16
    pop dx
    push dx
    mul dx                 ;Limite vertical do tamanho
    mov dx, ax
    sub dx, 16             ;Posiciona DX no inicio do limite vertical
    push ax
    
	.loop:
        lodsb               ;Carrega em AL o conteudo apontado por SI e inc SI
        call printPixel
        inc cx              ;CX = x, deslocar um para o lado
        cmp cx, bx          ;Limite lateral 
        je .nextLine        ;Ir para proxima linha
        jmp .loop           ;Carregar proximo pixel
        
    .nextLine:
        sub cx, 16          ;Voltar para o inicio da linha (CX = x)
        inc dx              ;Ir para a linha de baixo (DX = y)
        pop ax
        cmp dx, ax          ;Limite vertical (verifica quando todos os pixels foram postos)
        je .end             ;Encerra 
        push ax
        jmp .loop           ;Carregar o proximo pixel

    .end: 
        pop dx              ;Recuperar estado anterior dos registradores
        pop cx
        pop bx
        pop ax
        ret                 ;Retornar

boardDrawing:              ;Desenhar tabuleiro
    push ax                ;Armazenar estado anterior dos registradores
    push bx              
    push cx              
    push dx
    push si
    xor ax, ax             ;Limpando registradores
    xor cx, cx
	mov bx, ax
	mov dx, ax

    mov si, size           ;Ponteiro SI aponta para onde a str (tamanho do lado) esta armazenada 
    lodsb                  ;Carrega em AL o conteudo apontado por SI e inc SI
    mov bx, ax             ;Armazenar a quantidade total de itens em BX
    inc dx

    .loop:
        pop si
        lodsb              ;Carrega em AL o conteudo apontado por SI e inc SI
        push si

        cmp al, 'C'
        mov si, square     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 'c'
        mov si, selectSquare     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 48
        mov si, openSquare ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 'B'
        mov si, bomb       ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 'b'
        mov si, openBomb   ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 'F'
        mov si, flag       ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 49
        mov si, numOne     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 50
        mov si, numTwo     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 51
        mov si, numThree   ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 52
        mov si, numFour    ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 53
        mov si, numFive    ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 54
        mov si, numSix     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 55
        mov si, numSeven   ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 56
        mov si, numEight   ;Ponteiro SI apontando para o inicio da str
        je .continue

        cmp al, 'f'
        mov si, selectFlag     ;Ponteiro SI apontando para o inicio da str
        je .continue

        cmp al, 80
        mov si, selectOpenSquare     ;Ponteiro SI apontando para o inicio da str
        je .continue

        cmp al, 81
        mov si, selectNumOne     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 82
        mov si, selectNumTwo     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 83
        mov si, selectNumThree     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 84
        mov si, selectNumFour     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 85
        mov si, selectNumFive     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 86
        mov si, numSix     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 87
        mov si, numSeven     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        cmp al, 88
        mov si, numEight     ;Ponteiro SI apontando para o inicio da str
        je .continue
        
        ;jmp .continue2

    .continue:
        inc cx             ;CX = x, deslocar um para o lado
        call drawing
        cmp cx, bx         ;Limite lateral (ir para a proxima linha)
        je .nextLine       ;Ir para proxima linha
        jmp .loop          ;Carregar proximo quadrado
    
    .continue2:
        inc cx             ;CX = x, deslocar um para o lado
        cmp cx, bx         ;Limite lateral (se passar dos 16 pixels por linha, ir para a proxima linha)
        je .nextLine       ;Ir para proxima linha
        jmp .loop          ;Carregar proximo quadrado

    .nextLine:
        sub cx, bx         ;Voltar para o inicio da linha (CX = x)
        cmp dx, bx         ;Limite vertical (verifica quando todos os quadrados foram postos)
        je .end            ;Encerra 
        inc dx             ;Ir para a linha de baixo (DX = y)
        jmp .loop          ;Carregar o proximo quadrado

    .end: 
        pop si             ;Recuperar estado anterior dos registradores
        pop dx
        pop cx
        pop bx
        pop ax
        ret                ;Retornar


;END DRAWING GAME


start:
    xor ax, ax             ;Limpando os registradores
    mov ds, ax
    mov es, ax

    int 0x1A               ;Interrupcao do sistema, conta o num de clocks desde da meia noite e armazena CX:DX
 	mov ax, dx             ;Armazena em AX o conteudo de DX (ira gerar um num psudoaleatorio)
    mov di, Xo             ;DI aponta para Xo onde sera armazenado o conteudo de AX
    stosb                  ;O valor de AL é armazenado no endereco apontado por DI e DI é incrementado

    ;Definindo a matriz:
    call matrixSize
    call putBomb
    call putNumbers
    call closeMatrixSize

    xor ax, ax             ;Limpando registradores
    xor cx, cx
    mov bx, ax
    mov dx, ax

    jmp playing

exit: 
    jmp $